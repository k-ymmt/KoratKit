// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Log.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Log {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  var time: Double {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  var level: Log.LogLevel {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  var source: Log.Source {
    get {return _storage._source ?? Log.Source()}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {_uniqueStorage()._source = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum LogLevel: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case trace // = 0
    case debug // = 1
    case info // = 2
    case notice // = 3
    case warning // = 4
    case error // = 5
    case critical // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .trace
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .trace
      case 1: self = .debug
      case 2: self = .info
      case 3: self = .notice
      case 4: self = .warning
      case 5: self = .error
      case 6: self = .critical
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .trace: return 0
      case .debug: return 1
      case .info: return 2
      case .notice: return 3
      case .warning: return 4
      case .error: return 5
      case .critical: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Source {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var file: String = String()

    var function: String = String()

    var line: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Log.LogLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Log.LogLevel] = [
    .trace,
    .debug,
    .info,
    .notice,
    .warning,
    .error,
    .critical,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Log"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "time"),
    3: .same(proto: "level"),
    4: .same(proto: "source"),
  ]

  fileprivate class _StorageClass {
    var _message: String = String()
    var _time: Double = 0
    var _level: Log.LogLevel = .trace
    var _source: Log.Source? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _message = source._message
      _time = source._time
      _level = source._level
      _source = source._source
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._message)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._time)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._level)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._source)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._message.isEmpty {
        try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 1)
      }
      if _storage._time != 0 {
        try visitor.visitSingularDoubleField(value: _storage._time, fieldNumber: 2)
      }
      if _storage._level != .trace {
        try visitor.visitSingularEnumField(value: _storage._level, fieldNumber: 3)
      }
      if let v = _storage._source {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Log, rhs: Log) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._message != rhs_storage._message {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._source != rhs_storage._source {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Log.LogLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRACE"),
    1: .same(proto: "DEBUG"),
    2: .same(proto: "INFO"),
    3: .same(proto: "NOTICE"),
    4: .same(proto: "WARNING"),
    5: .same(proto: "ERROR"),
    6: .same(proto: "CRITICAL"),
  ]
}

extension Log.Source: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Log.protoMessageName + ".Source"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "file"),
    2: .same(proto: "function"),
    3: .same(proto: "line"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.file)
      case 2: try decoder.decodeSingularStringField(value: &self.function)
      case 3: try decoder.decodeSingularInt32Field(value: &self.line)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.file.isEmpty {
      try visitor.visitSingularStringField(value: self.file, fieldNumber: 1)
    }
    if !self.function.isEmpty {
      try visitor.visitSingularStringField(value: self.function, fieldNumber: 2)
    }
    if self.line != 0 {
      try visitor.visitSingularInt32Field(value: self.line, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Log.Source, rhs: Log.Source) -> Bool {
    if lhs.file != rhs.file {return false}
    if lhs.function != rhs.function {return false}
    if lhs.line != rhs.line {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
